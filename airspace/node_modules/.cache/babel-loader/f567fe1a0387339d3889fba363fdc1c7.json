{"ast":null,"code":"import React, { useState, useRef, useEffect } from 'react';\nimport base64 from 'base-64';\nimport Select, { components } from 'react-select';\nimport throttle from 'lodash.throttle';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar postAutocompleteAddress = function postAutocompleteAddress(apiKey, addressPrefix, additionalAddressData) {\n  var url = new URL('https://api.lob.com/v1/us_autocompletions');\n  url.searchParams.append('av_integration_origin', window.location.href);\n  url.searchParams.append('integration', 'react-address-autocomplete');\n  url.searchParams.append('valid_addresses', 'true');\n  url.searchParams.append('case', 'proper');\n  var init = {\n    method: 'POST',\n    headers: {\n      Authorization: \"Basic \" + base64.encode(apiKey + ':'),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(_extends({\n      address_prefix: addressPrefix\n    }, additionalAddressData))\n  };\n  return fetch(url, init);\n};\n\nvar postVerifyAddress = function postVerifyAddress(apiKey, address) {\n  var payload = typeof address === 'string' ? {\n    address: address\n  } : address;\n  var url = new URL('https://api.lob.com/v1/us_verifications');\n  url.searchParams.append('av_integration_origin', window.location.href);\n  url.searchParams.append('integration', 'react-address-autocomplete');\n  var init = {\n    method: 'POST',\n    headers: {\n      Authorization: \"Basic \" + base64.encode(apiKey + ':'),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  };\n  return fetch(url, init);\n};\n\nvar postVerifyInternationalAddress = function postVerifyInternationalAddress(apiKey, address, countryCode) {\n  var payload = typeof address === 'string' ? {\n    address: address\n  } : address;\n  var url = new URL('https://api.lob.com/v1/intl_verifications');\n  url.searchParams.append('av_integration_origin', window.location.href);\n  url.searchParams.append('integration', 'react-address-autocomplete');\n  var init = {\n    method: 'POST',\n    headers: {\n      Authorization: \"Basic \" + base64.encode(apiKey + ':'),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(_extends({}, payload, {\n      country: countryCode\n    }))\n  };\n  return fetch(url, init);\n};\n\nvar processApiResponse = function processApiResponse(apiResponse) {\n  return apiResponse.json().then(function (data) {\n    return 'error' in data ? Promise.reject(new Error(data.error.message)) : data;\n  });\n};\n\nvar validateArguments = function validateArguments(apiKey, address, countryCode, isInternational) {\n  if (!Object.keys(address || {}).length) {\n    return new Error('Empty address was passed to verify function');\n  }\n\n  if (!apiKey.length) {\n    return new Error('Missing API key');\n  }\n\n  if (isInternational) {\n    if (typeof countryCode !== 'string') {\n      return new Error('Expected countryCode to be of type string');\n    }\n\n    if (/[A-Z]{2}/.test(countryCode) === false) {\n      return new Error('countryCode must be a 2 letter country short-name code (ISO 3166)');\n    }\n  }\n\n  return null;\n};\n\nvar verify = function verify(apiKey, address) {\n  var error = validateArguments(apiKey, address, null, false);\n\n  if (error) {\n    return Promise.reject(error);\n  }\n\n  var payloadAddress = address;\n\n  if (typeof address === 'object') {\n    var componentsWithValue = Object.keys(address).filter(function (addressComponent) {\n      return address[addressComponent] !== '';\n    });\n\n    if (componentsWithValue.length === 1 && componentsWithValue.includes('primary_line')) {\n      payloadAddress = address.primary_line;\n    }\n  }\n\n  return postVerifyAddress(apiKey, payloadAddress).then(processApiResponse);\n};\n\nvar verifyInternational = function verifyInternational(apiKey, address, countryCode) {\n  var error = validateArguments(apiKey, address, countryCode, true);\n\n  if (error) {\n    return Promise.reject(error);\n  }\n\n  return postVerifyInternationalAddress(apiKey, address, countryCode).then(processApiResponse);\n};\n\nvar _excluded = [\"addressComponentValues\", \"apiKey\", \"delaySearch\", \"delayValue\", \"disableLobLogo\", \"onSelection\", \"onError\", \"onInputChange\", \"inputValue\", \"primaryLineOnly\"];\nvar LOB_LABEL = 'lob-label';\nvar LOB_URL = 'https://www.lob.com/address-verification?utm_source=autocomplete&utm_medium=react';\nvar lobGrayText = {\n  color: '#888',\n  textDecoration: 'inherit'\n};\nvar lobLabel = {\n  alignItems: 'center',\n  borderBottom: '1px solid #DDDDDD',\n  cursor: 'pointer',\n  display: 'flex',\n  fontSize: '17px',\n  padding: '16px',\n  pointerEvents: 'none'\n};\nvar lobLabelLink = {\n  fontWeight: 600,\n  color: '#0699D6',\n  textDecoration: 'inherit'\n};\nvar lobLabelText = {\n  flex: 1,\n  fontWeight: 400,\n  marginLeft: '12px'\n};\nvar lobLogo = {\n  height: '.9em',\n  marginLeft: '1px',\n  marginTop: '3px'\n};\nvar logoLarge = {\n  height: '21px'\n};\n\nvar LobLogo = function LobLogo(_ref) {\n  var style = _ref.style;\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 1259 602\",\n    style: style\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#0099d7\",\n    d: \"M1063,141c-47.06,0-89,18.33-121,50.78V0H780V338.74C765,222.53,666.88,138,540,138c-137,0-242,101-242,232a235,235,0,0,0,7.7,60H164V0H0V585H307l14.54-112.68C359.94,550,441.74,602,540,602c127.75,0,225.08-83.62,240-200.41V585H930V540.27c31.8,37,77.27,56.73,133,56.73,103,0,196-109,196-228C1259,239,1175,141,1063,141ZM540,450c-45,0-81-36-81-80s36-80,81-80c46,0,81,35,81,80S585,450,540,450Zm475-1c-46,0-83-36-83-80a82.8,82.8,0,0,1,82.6-83h.4c47,0,85,37,85,83C1100,413,1062,449,1015,449Z\"\n  }));\n};\n\nvar poweredByLob = function poweredByLob() {\n  return /*#__PURE__*/React.createElement(\"a\", {\n    href: LOB_URL,\n    style: lobGrayText\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      verticalAlign: 'top'\n    }\n  }, \"Powered by \"), /*#__PURE__*/React.createElement(LobLogo, {\n    style: lobLogo\n  }));\n};\n\nvar getLobLabel = function getLobLabel() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: lobLabel\n  }, /*#__PURE__*/React.createElement(LobLogo, {\n    style: logoLarge\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: _extends({}, lobGrayText, lobLabelText)\n  }, \"Deliverable addresses\"), /*#__PURE__*/React.createElement(\"a\", {\n    style: lobLabelLink,\n    href: LOB_URL\n  }, \"Learn more\"));\n};\n\nvar getOptionElement = function getOptionElement(suggestion, inputValue) {\n  var primary_line = suggestion.primary_line,\n      city = suggestion.city,\n      state = suggestion.state,\n      zip_code = suggestion.zip_code;\n  var boldStopIndex = 0;\n  inputValue.split('').forEach(function (inputChar) {\n    if (inputChar.toLowerCase() === primary_line.charAt(boldStopIndex).toLowerCase()) {\n      boldStopIndex += 1;\n    }\n  });\n  var primaryLineElement = boldStopIndex === 0 ? /*#__PURE__*/React.createElement(\"span\", null, primary_line, \", \") : boldStopIndex === primary_line.length ? /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(\"strong\", null, primary_line, \", \")) : /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(\"strong\", null, primary_line.substring(0, boldStopIndex)), primary_line.substring(boldStopIndex), \",\", ' ');\n  return /*#__PURE__*/React.createElement(\"span\", null, primaryLineElement, /*#__PURE__*/React.createElement(\"span\", {\n    style: lobGrayText\n  }, city, \",\\xA0\", state.toUpperCase(), \",\\xA0\", zip_code));\n};\n\nvar Input = function Input(props) {\n  return /*#__PURE__*/React.createElement(components.Input, _extends({}, props, {\n    isHidden: false\n  }));\n};\n\nvar Autocomplete = function Autocomplete(_ref2) {\n  var _ref2$addressComponen = _ref2.addressComponentValues,\n      addressComponentValues = _ref2$addressComponen === void 0 ? {} : _ref2$addressComponen,\n      apiKey = _ref2.apiKey,\n      _ref2$delaySearch = _ref2.delaySearch,\n      delaySearch = _ref2$delaySearch === void 0 ? false : _ref2$delaySearch,\n      _ref2$delayValue = _ref2.delayValue,\n      delayValue = _ref2$delayValue === void 0 ? 800 : _ref2$delayValue,\n      _ref2$disableLobLogo = _ref2.disableLobLogo,\n      disableLobLogo = _ref2$disableLobLogo === void 0 ? true : _ref2$disableLobLogo,\n      _ref2$onSelection = _ref2.onSelection,\n      onSelection = _ref2$onSelection === void 0 ? function () {} : _ref2$onSelection,\n      _ref2$onError = _ref2.onError,\n      onError = _ref2$onError === void 0 ? function () {} : _ref2$onError,\n      _ref2$onInputChange = _ref2.onInputChange,\n      onInputChange = _ref2$onInputChange === void 0 ? function () {} : _ref2$onInputChange,\n      _ref2$inputValue = _ref2.inputValue,\n      defaultInputValue = _ref2$inputValue === void 0 ? '' : _ref2$inputValue,\n      _ref2$primaryLineOnly = _ref2.primaryLineOnly,\n      primaryLineOnly = _ref2$primaryLineOnly === void 0 ? false : _ref2$primaryLineOnly,\n      reactSelectProps = _objectWithoutPropertiesLoose(_ref2, _excluded);\n\n  var _useState = useState(defaultInputValue),\n      inputValue = _useState[0],\n      setInputValue = _useState[1];\n\n  var _useState2 = useState('AD'),\n      selectValue = _useState2[0],\n      setSelectValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      autocompleteResults = _useState3[0],\n      setAutocompleteResults = _useState3[1];\n\n  var fetchData = function fetchData(inputValue, addressComponentValues) {\n    return postAutocompleteAddress(apiKey, inputValue, addressComponentValues).then(function (result) {\n      return result.json();\n    }).then(function (_ref3) {\n      var suggestions = _ref3.suggestions,\n          error = _ref3.error;\n\n      if (error) {\n        onError(error.message);\n        return;\n      }\n\n      var newSuggestions = suggestions.map(function (x) {\n        return {\n          value: x,\n          label: getOptionElement(x, inputValue)\n        };\n      });\n      setAutocompleteResults([{\n        value: LOB_LABEL,\n        label: getLobLabel()\n      }].concat(newSuggestions));\n    })[\"catch\"](function (err) {\n      console.error(err.message);\n      onError(err.message);\n    });\n  };\n\n  var throttledFetchData = useRef(throttle(fetchData, delayValue)).current;\n  useEffect(function () {\n    if (inputValue) {\n      if (delaySearch) {\n        throttledFetchData(inputValue, addressComponentValues);\n      } else {\n        fetchData(inputValue, addressComponentValues);\n      }\n    }\n  }, [inputValue, delaySearch]);\n\n  var updateInputValueFromOption = function updateInputValueFromOption(option) {\n    if (!option) {\n      setInputValue('');\n      return;\n    }\n\n    var _option$value = option.value,\n        primary_line = _option$value.primary_line,\n        secondary_line = _option$value.secondary_line,\n        city = _option$value.city,\n        state = _option$value.state,\n        zip_code = _option$value.zip_code;\n\n    if (primaryLineOnly) {\n      setInputValue(primary_line);\n    } else {\n      var secondary = secondary_line ? ' ' + secondary_line : '';\n      setInputValue(\"\" + primary_line + secondary + \", \" + city + \", \" + state + \", \" + zip_code);\n    }\n  };\n\n  var handleInputChange = function handleInputChange(newInputValue, _ref4) {\n    var action = _ref4.action;\n\n    if (action === 'input-blur') {\n      return;\n    } else if (action === 'input-change') {\n      setInputValue(newInputValue);\n      onInputChange(newInputValue, {\n        action: action\n      });\n    }\n  };\n\n  var handleChange = function handleChange(option) {\n    if (option.value === LOB_LABEL) {\n      window.location.href = LOB_URL;\n      return;\n    }\n\n    if (typeof option === 'string') {\n      setInputValue(option);\n      setSelectValue(option);\n      onSelection(option);\n      return;\n    }\n\n    updateInputValueFromOption(option);\n    onSelection(option);\n  };\n\n  var handleSelect = function handleSelect(option) {\n    if (option.value !== LOB_LABEL) {\n      updateInputValueFromOption(option);\n      onSelection(option);\n    }\n  };\n\n  var customFilter = function customFilter(candidate, input) {\n    return candidate;\n  };\n\n  var customStyles = _extends({\n    option: function option(styles, _ref5) {\n      var data = _ref5.data;\n\n      if (data.value === LOB_LABEL) {\n        return _extends({}, styles, {\n          background: 'none',\n          cursor: 'pointer',\n          padding: '0'\n        });\n      }\n\n      return styles;\n    }\n  }, reactSelectProps.styles);\n\n  return /*#__PURE__*/React.createElement(Select, _extends({\n    components: {\n      Input: Input\n    },\n    inputValue: inputValue,\n    options: autocompleteResults,\n    controlShouldRenderValue: false,\n    noOptionsMessage: !disableLobLogo ? poweredByLob : function () {\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    },\n    placeholder: \"Start typing an address...\",\n    value: selectValue\n  }, reactSelectProps, {\n    filterOption: customFilter,\n    onChange: handleChange,\n    onInputChange: handleInputChange,\n    onSelect: handleSelect,\n    styles: customStyles\n  }));\n};\n\nvar baseStyles = {\n  lob_container: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  lob_input: {\n    backgroundColor: 'hsl(0, 0%, 100%)',\n    border: 'solid 1px hsl(0, 0%, 80%)',\n    borderRadius: '4px',\n    boxSizing: 'border-box',\n    minHeight: '38px',\n    outline: 0,\n    padding: '0px 8px',\n    width: '100%'\n  },\n  lob_label: {\n    alignSelf: 'center',\n    minWidth: '5em',\n    marginRight: '1em',\n    textAlign: 'end'\n  },\n  lob_row: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: '1em'\n  }\n};\n\nvar useMergedStyles = function (userStyles, isInternational) {\n  var mergedStyles = {};\n\n  if (isInternational) {\n    baseStyles = _extends({}, baseStyles, {\n      lob_label: _extends({}, baseStyles.lob_label, {\n        minWidth: '8em'\n      })\n    });\n  }\n\n  Object.keys(baseStyles).forEach(function (key) {\n    mergedStyles[key] = key in userStyles ? userStyles[key](baseStyles[key]) : baseStyles[key];\n  });\n  return mergedStyles;\n};\n\nvar _excluded$1 = [\"apiKey\", \"children\", \"hideSubmitButton\", \"onFieldChange\", \"onSelection\", \"onSubmit\", \"styles\", \"submitButtonLabel\"];\nvar defaultForm = {\n  primary_line: '',\n  secondary_line: '',\n  city: '',\n  state: '',\n  zip_code: ''\n};\nvar customStyles = {\n  container: function container(provided) {\n    return _extends({}, provided, {\n      width: '100%'\n    });\n  }\n};\n\nvar AddressForm = function AddressForm(_ref) {\n  var apiKey = _ref.apiKey,\n      children = _ref.children,\n      _ref$hideSubmitButton = _ref.hideSubmitButton,\n      hideSubmitButton = _ref$hideSubmitButton === void 0 ? false : _ref$hideSubmitButton,\n      _ref$onFieldChange = _ref.onFieldChange,\n      onFieldChange = _ref$onFieldChange === void 0 ? function () {} : _ref$onFieldChange,\n      _ref$onSelection = _ref.onSelection,\n      onSelection = _ref$onSelection === void 0 ? function () {} : _ref$onSelection,\n      _ref$onSubmit = _ref.onSubmit,\n      onSubmit = _ref$onSubmit === void 0 ? function () {} : _ref$onSubmit,\n      _ref$styles = _ref.styles,\n      styles = _ref$styles === void 0 ? {} : _ref$styles,\n      _ref$submitButtonLabe = _ref.submitButtonLabel,\n      submitButtonLabel = _ref$submitButtonLabe === void 0 ? 'Submit' : _ref$submitButtonLabe,\n      additionalProps = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  var _useState = useState(defaultForm),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var primary_line = form.primary_line,\n      secondary_line = form.secondary_line,\n      city = form.city,\n      state = form.state,\n      zip_code = form.zip_code;\n\n  var handleChange = function handleChange(e) {\n    var _extends2;\n\n    var newForm = _extends({}, form, (_extends2 = {}, _extends2[e.target.id] = e.target.value, _extends2));\n\n    setForm(newForm);\n    onFieldChange({\n      address: newForm,\n      event: e\n    });\n  };\n\n  var handleChangePrimaryLine = function handleChangePrimaryLine(newInputValue, _ref2) {\n    var action = _ref2.action;\n\n    if (action === 'input-change') {\n      var newForm = _extends({}, form, {\n        primary_line: newInputValue\n      });\n\n      setForm(newForm);\n      onFieldChange({\n        address: newForm,\n        event: {\n          target: {\n            id: 'primary_line',\n            value: newInputValue\n          }\n        }\n      });\n    }\n  };\n\n  var handleSelect = function handleSelect(option) {\n    setForm(_extends({}, option.value, {\n      secondary_line: option.value.secondary_line || form.secondary_line || ''\n    }));\n    onSelection(_extends({}, option, {\n      value: _extends({}, option.value, {\n        secondary_line: option.value.secondary_line || form.secondary_line || ''\n      })\n    }));\n  };\n\n  var handleSubmit = function handleSubmit() {\n    return verify(apiKey, form).then(function (verificationResult) {\n      var primary_line = verificationResult.primary_line,\n          secondary_line = verificationResult.secondary_line,\n          _verificationResult$c = verificationResult.components,\n          city = _verificationResult$c.city,\n          state = _verificationResult$c.state,\n          zip_code = _verificationResult$c.zip_code,\n          zip_code_plus_4 = _verificationResult$c.zip_code_plus_4;\n      setForm({\n        primary_line: primary_line,\n        secondary_line: secondary_line,\n        city: city,\n        state: state,\n        zip_code: zip_code + \"-\" + zip_code_plus_4\n      });\n      onSubmit(verificationResult);\n    });\n  };\n\n  var mergedStyles = useMergedStyles(styles, false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_container\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"primary_line\"\n  }, \"Address\"), /*#__PURE__*/React.createElement(Autocomplete, _extends({\n    apiKey: apiKey,\n    inputId: \"primary_line\",\n    inputValue: primary_line\n  }, additionalProps, {\n    onInputChange: handleChangePrimaryLine,\n    _addressComponentValues: {\n      city: city,\n      state: state,\n      zip_code: zip_code\n    },\n    onSelection: handleSelect,\n    primaryLineOnly: true,\n    styles: customStyles\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"secondary_line\"\n  }, \"Apt, Suite\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"secondary_line\",\n    onChange: handleChange,\n    value: secondary_line\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"city\"\n  }, \"City\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"city\",\n    onChange: handleChange,\n    value: city\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"state\"\n  }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"state\",\n    onChange: handleChange,\n    value: state\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"zip_code\"\n  }, \"Zip\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: _extends({}, mergedStyles.lob_input, {\n      marginBottom: 'auto'\n    }),\n    id: \"zip_code\",\n    onChange: handleChange,\n    value: zip_code\n  })), children, !hideSubmitButton && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    style: mergedStyles.lob_submit\n  }, submitButtonLabel));\n};\n\nvar validLobCountryCodesn\nvar CountrySelect = function CountrySelect(_ref) {\n  var props = _extends({}, _ref);\n\n  return /*#__PURE__*/React.createElement(\"select\", props, validLobCountryCodes.map(function (code) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: code,\n      value: code\n    }, code);\n  }));\n};\n\nvar defaultForm$1 = {\n  primary_line: '',\n  secondary_line: '',\n  city: '',\n  state: '',\n  postal_code: ''\n};\n\nvar AddressFormInternational = function AddressFormInternational(_ref) {\n  var _ref$apiKey = _ref.apiKey,\n      apiKey = _ref$apiKey === void 0 ? null : _ref$apiKey,\n      children = _ref.children,\n      _ref$hideSubmitButton = _ref.hideSubmitButton,\n      hideSubmitButton = _ref$hideSubmitButton === void 0 ? false : _ref$hideSubmitButton,\n      _ref$onFieldChange = _ref.onFieldChange,\n      onFieldChange = _ref$onFieldChange === void 0 ? function () {} : _ref$onFieldChange,\n      _ref$onSubmit = _ref.onSubmit,\n      onSubmit = _ref$onSubmit === void 0 ? function () {} : _ref$onSubmit,\n      _ref$styles = _ref.styles,\n      styles = _ref$styles === void 0 ? {} : _ref$styles,\n      _ref$submitButtonLabe = _ref.submitButtonLabel,\n      submitButtonLabel = _ref$submitButtonLabe === void 0 ? 'Submit' : _ref$submitButtonLabe;\n\n  var _useState = useState(defaultForm$1),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var primary_line = form.primary_line,\n      secondary_line = form.secondary_line,\n      city = form.city,\n      state = form.state,\n      postal_code = form.postal_code,\n      country = form.country;\n\n  var handleChange = function handleChange(e) {\n    var _extends2;\n\n    setForm(_extends({}, form, (_extends2 = {}, _extends2[e.target.id] = e.target.value, _extends2)));\n    onFieldChange(e);\n  };\n\n  var handleSubmit = function handleSubmit() {\n    if (!apiKey) {\n      console.error('[@lob/react-address-autocomplete] ' + 'AddressFormInternational requires props apiKey for verifications');\n      return;\n    }\n\n    verifyInternational(apiKey, form, form.country).then(function (verificationResult) {\n      var primary_line = verificationResult.primary_line,\n          secondary_line = verificationResult.secondary_line,\n          _verificationResult$c = verificationResult.components,\n          city = _verificationResult$c.city,\n          state = _verificationResult$c.state,\n          postal_code = _verificationResult$c.postal_code;\n      setForm({\n        primary_line: primary_line,\n        secondary_line: secondary_line,\n        city: city,\n        state: state,\n        postal_code: postal_code\n      });\n      onSubmit(verificationResult);\n    });\n  };\n\n  var mergedStyles = useMergedStyles(styles, true);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"intl_container\",\n    style: mergedStyles.lob_container\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"primary_line\"\n  }, \"Address Line 1\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"primary_line\",\n    onChange: handleChange,\n    value: primary_line\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"secondary_line\"\n  }, \"Address Line 2\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"secondary_line\",\n    onChange: handleChange,\n    value: secondary_line\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"city\"\n  }, \"City / Town\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"city\",\n    onChange: handleChange,\n    value: city\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"state\"\n  }, \"State / Province / Region\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: mergedStyles.lob_input,\n    id: \"state\",\n    onChange: handleChange,\n    value: state\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"postal_code\"\n  }, \"Zip / Postal Code\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: _extends({}, mergedStyles.lob_input),\n    id: \"postal_code\",\n    onChange: handleChange,\n    value: postal_code\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyles.lob_row\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: mergedStyles.lob_label,\n    htmlFor: \"country\"\n  }, \"Country\"), /*#__PURE__*/React.createElement(CountrySelect, {\n    id: \"country\",\n    onChange: handleChange,\n    style: _extends({}, mergedStyles.lob_input, {\n      marginBottom: 'auto'\n    }),\n    value: country\n  })), children, !hideSubmitButton && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    style: mergedStyles.lob_submit\n  }, submitButtonLabel));\n};\n\nexport { AddressForm, AddressFormInternational, Autocomplete, CountrySelect, verify, verifyInternational };","map":{"version":3,"mappings":"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","names":["postAutocompleteAddress","apiKey","addressPrefix","additionalAddressData","url","URL","searchParams","append","window","location","href","init","method","headers","Authorization","base64","encode","body","JSON","stringify","address_prefix","fetch","postVerifyAddress","address","payload","postVerifyInternationalAddress","countryCode","country","processApiResponse","apiResponse","json","then","data","Promise","reject","Error","error","message","validateArguments","isInternational","Object","keys","length","test","verify","payloadAddress","componentsWithValue","filter","addressComponent","includes","primary_line","verifyInternational","LOB_LABEL","LOB_URL","lobGrayText","color","textDecoration","lobLabel","alignItems","borderBottom","cursor","display","fontSize","padding","pointerEvents","lobLabelLink","fontWeight","lobLabelText","flex","marginLeft","lobLogo","height","marginTop","logoLarge","LobLogo","style","React","xmlns","viewBox","fill","d","poweredByLob","verticalAlign","getLobLabel","getOptionElement","suggestion","inputValue","city","state","zip_code","boldStopIndex","split","forEach","inputChar","toLowerCase","charAt","primaryLineElement","substring","toUpperCase","Input","props","components","isHidden","Autocomplete","addressComponentValues","delaySearch","delayValue","disableLobLogo","onSelection","onError","onInputChange","defaultInputValue","primaryLineOnly","reactSelectProps","useState","setInputValue","selectValue","setSelectValue","autocompleteResults","setAutocompleteResults","fetchData","result","suggestions","newSuggestions","map","x","value","label","err","console","throttledFetchData","useRef","throttle","current","useEffect","updateInputValueFromOption","option","secondary_line","secondary","handleInputChange","newInputValue","action","handleChange","handleSelect","customFilter","candidate","input","customStyles","styles","background","Select","options","controlShouldRenderValue","noOptionsMessage","placeholder","filterOption","onChange","onSelect","baseStyles","lob_container","flexDirection","lob_input","backgroundColor","border","borderRadius","boxSizing","minHeight","outline","width","lob_label","alignSelf","minWidth","marginRight","textAlign","lob_row","marginBottom","userStyles","mergedStyles","key","defaultForm","container","provided","AddressForm","children","hideSubmitButton","onFieldChange","onSubmit","submitButtonLabel","additionalProps","form","setForm","e","newForm","target","id","event","handleChangePrimaryLine","handleSubmit","verificationResult","zip_code_plus_4","useMergedStyles","htmlFor","inputId","_addressComponentValues","onClick","lob_submit","validLobCountryCodes","CountrySelect","code","postal_code","AddressFormInternational"],"sources":["C:\\Users\\asus\\OneDrive\\Desktop\\capstone\\carwebsite\\node_modules\\@lob\\react-address-autocomplete\\src\\api.js","C:\\Users\\asus\\OneDrive\\Desktop\\capstone\\carwebsite\\node_modules\\@lob\\react-address-autocomplete\\src\\verify.js","C:\\Users\\asus\\OneDrive\\Desktop\\capstone\\carwebsite\\node_modules\\@lob\\react-address-autocomplete\\src\\Autocomplete.js","C:\\Users\\asus\\OneDrive\\Desktop\\capstone\\carwebsite\\node_modules\\@lob\\react-address-autocomplete\\src\\AddressForm\\useMergedStyles.js","C:\\Users\\asus\\OneDrive\\Desktop\\capstone\\carwebsite\\node_modules\\@lob\\react-address-autocomplete\\src\\AddressForm\\AddressForm.js","C:\\Users\\asus\\OneDrive\\Desktop\\capstone\\carwebsite\\node_modules\\@lob\\react-address-autocomplete\\src\\CountrySelect.js","C:\\Users\\asus\\OneDrive\\Desktop\\capstone\\carwebsite\\node_modules\\@lob\\react-address-autocomplete\\src\\AddressForm\\AddressFormInternational.js"],"sourcesContent":["// External Dependencies\nimport base64 from 'base-64'\n\nexport const postAutocompleteAddress = (\n  apiKey,\n  addressPrefix,\n  additionalAddressData\n) => {\n  const url = new URL('https://api.lob.com/v1/us_autocompletions')\n  url.searchParams.append('av_integration_origin', window.location.href)\n  url.searchParams.append('integration', 'react-address-autocomplete')\n  url.searchParams.append('valid_addresses', 'true')\n  url.searchParams.append('case', 'proper')\n  const init = {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${base64.encode(apiKey + ':')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      address_prefix: addressPrefix,\n      ...additionalAddressData\n    })\n  }\n\n  return fetch(url, init)\n}\n\nexport const postVerifyAddress = (apiKey, address) => {\n  const payload = typeof address === 'string' ? { address } : address\n  const url = new URL('https://api.lob.com/v1/us_verifications')\n  url.searchParams.append('av_integration_origin', window.location.href)\n  url.searchParams.append('integration', 'react-address-autocomplete')\n  const init = {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${base64.encode(apiKey + ':')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  }\n\n  return fetch(url, init)\n}\n\nexport const postVerifyInternationalAddress = (\n  apiKey,\n  address,\n  countryCode\n) => {\n  const payload = typeof address === 'string' ? { address } : address\n  const url = new URL('https://api.lob.com/v1/intl_verifications')\n  url.searchParams.append('av_integration_origin', window.location.href)\n  url.searchParams.append('integration', 'react-address-autocomplete')\n  const init = {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${base64.encode(apiKey + ':')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ ...payload, country: countryCode })\n  }\n\n  return fetch(url, init)\n}\n","// Internal Dependencies\nimport { postVerifyAddress, postVerifyInternationalAddress } from './api'\n\n// Helper function to convert any API error into a JS Error object. This is needed when\n// communication to the API was successful but the payload was bad.\nconst processApiResponse = (apiResponse) =>\n  apiResponse\n    .json()\n    .then((data) =>\n      'error' in data ? Promise.reject(new Error(data.error.message)) : data\n    )\n\n/**\n * A subset of the request object required by Lob. Note: Either zip_code is required or both city\n * and state are required. Learn more about Lob's verification endpoint here:\n * https://docs.lob.com/#operation/us_verification\n * @typedef AddressObject\n * @param {string} primary_line\n * @param {string?} secondary_line\n * @param {string} city\n * @param {string} state\n * @param {string} zip_code\n */\n\nconst validateArguments = (apiKey, address, countryCode, isInternational) => {\n  if (!Object.keys(address || {}).length) {\n    return new Error('Empty address was passed to verify function')\n  }\n\n  if (!apiKey.length) {\n    return new Error('Missing API key')\n  }\n\n  if (isInternational) {\n    if (typeof countryCode !== 'string') {\n      return new Error('Expected countryCode to be of type string')\n    }\n    if (/[A-Z]{2}/.test(countryCode) === false) {\n      return new Error(\n        'countryCode must be a 2 letter country short-name code (ISO 3166)'\n      )\n    }\n  }\n\n  return null\n}\n\n/**\n * Checks the deliverability of a given address and provides meta data such as geo coordinates,\n * county, building type, etc.\n * @param {string} apiKey - The API key associated with your Lob account\n * @param {string | AddressObject} address - The address to verify\n * @returns {Promise<Object>} - The API response from Lob. For more information visit:\n *  https://docs.lob.com/#operation/us_verification\n */\nexport const verify = (apiKey, address) => {\n  const error = validateArguments(apiKey, address, null, false)\n  if (error) {\n    return Promise.reject(error)\n  }\n\n  let payloadAddress = address\n  // Check if the a single line address was passed as an object\n  if (typeof address === 'object') {\n    const componentsWithValue = Object.keys(address).filter(\n      (addressComponent) => address[addressComponent] !== ''\n    )\n    if (\n      componentsWithValue.length === 1 &&\n      componentsWithValue.includes('primary_line')\n    ) {\n      payloadAddress = address.primary_line\n    }\n  }\n\n  // Send request to Lob and let user decide how to handle the response\n  return postVerifyAddress(apiKey, payloadAddress).then(processApiResponse)\n}\n\n/**\n * Checks the deliverability of a given address and provides meta data such as geo coordinates,\n * county, building type, etc.\n * @param {string} apiKey - The API key associated with your Lob account\n * @param {string | AddressObject} address - The address to verify\n * @returns {Promise<Object>} - The API response from Lob. For more information visit:\n *  https://docs.lob.com/#operation/us_verification\n */\nexport const verifyInternational = (apiKey, address, countryCode) => {\n  const error = validateArguments(apiKey, address, countryCode, true)\n\n  if (error) {\n    return Promise.reject(error)\n  }\n\n  // Send request to Lob and let user decide how to handle the response\n  return postVerifyInternationalAddress(apiKey, address, countryCode).then(\n    processApiResponse\n  )\n}\n","// External Dependencies\nimport React, { useEffect, useState, useRef } from 'react'\nimport Select, { components } from 'react-select'\nimport throttle from 'lodash.throttle'\n\n// Internal Dependencies\nimport { postAutocompleteAddress } from './api'\n\nconst LOB_LABEL = 'lob-label'\nconst LOB_URL =\n  'https://www.lob.com/address-verification?utm_source=autocomplete&utm_medium=react'\n\nconst lobGrayText = {\n  color: '#888',\n  textDecoration: 'inherit'\n}\n\nconst lobLabel = {\n  alignItems: 'center',\n  borderBottom: '1px solid #DDDDDD',\n  cursor: 'pointer',\n  display: 'flex',\n  fontSize: '17px',\n  padding: '16px',\n  pointerEvents: 'none'\n}\n\nconst lobLabelLink = {\n  fontWeight: 600,\n  color: '#0699D6',\n  textDecoration: 'inherit'\n}\n\nconst lobLabelText = {\n  flex: 1,\n  fontWeight: 400,\n  marginLeft: '12px'\n}\n\nconst lobLogo = {\n  height: '.9em',\n  marginLeft: '1px',\n  marginTop: '3px'\n}\n\nconst logoLarge = {\n  height: '21px'\n}\n\nconst LobLogo = ({ style }) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      viewBox='0 0 1259 602'\n      style={style}\n    >\n      <path\n        fill='#0099d7'\n        // eslint-disable-next-line\n        d='M1063,141c-47.06,0-89,18.33-121,50.78V0H780V338.74C765,222.53,666.88,138,540,138c-137,0-242,101-242,232a235,235,0,0,0,7.7,60H164V0H0V585H307l14.54-112.68C359.94,550,441.74,602,540,602c127.75,0,225.08-83.62,240-200.41V585H930V540.27c31.8,37,77.27,56.73,133,56.73,103,0,196-109,196-228C1259,239,1175,141,1063,141ZM540,450c-45,0-81-36-81-80s36-80,81-80c46,0,81,35,81,80S585,450,540,450Zm475-1c-46,0-83-36-83-80a82.8,82.8,0,0,1,82.6-83h.4c47,0,85,37,85,83C1100,413,1062,449,1015,449Z'\n      />\n    </svg>\n  )\n}\n\nconst poweredByLob = () => (\n  <a href={LOB_URL} style={lobGrayText}>\n    <span style={{ verticalAlign: 'top' }}>Powered by </span>\n    <LobLogo style={lobLogo} />\n  </a>\n)\n\nconst getLobLabel = () => (\n  <div style={lobLabel}>\n    <LobLogo style={logoLarge} />\n    <span style={{ ...lobGrayText, ...lobLabelText }}>\n      Deliverable addresses\n    </span>\n    <a style={lobLabelLink} href={LOB_URL}>\n      Learn more\n    </a>\n  </div>\n)\n\n// Highlight the users input in the primary line by comparing char by char. We only check the\n// primary line for simplicity sake\nconst getOptionElement = (suggestion, inputValue) => {\n  /* eslint-disable camelcase */\n  const { primary_line, city, state, zip_code } = suggestion\n\n  let boldStopIndex = 0\n\n  inputValue.split('').forEach((inputChar) => {\n    if (\n      inputChar.toLowerCase() ===\n      primary_line.charAt(boldStopIndex).toLowerCase()\n    ) {\n      boldStopIndex += 1\n    }\n  })\n\n  const primaryLineElement =\n    boldStopIndex === 0 ? (\n      <span>{primary_line}, </span>\n    ) : boldStopIndex === primary_line.length ? (\n      <span>\n        <strong>{primary_line}, </strong>\n      </span>\n    ) : (\n      <span>\n        <strong>{primary_line.substring(0, boldStopIndex)}</strong>\n        {primary_line.substring(boldStopIndex)},{' '}\n      </span>\n    )\n\n  return (\n    <span>\n      {primaryLineElement}\n      <span style={lobGrayText}>\n        {city},&nbsp;{state.toUpperCase()},&nbsp;{zip_code}\n      </span>\n    </span>\n  )\n  /* eslint-enable camelcase */\n}\n\n/**\n * Part of Lob's response body schema for US autocompletions\n * https://docs.lob.com/#section/Autocompletion-Test-Env\n * @typedef AddressObject\n * @param {string} primary_line\n * @param {string?} secondary_line\n * @param {string} city\n * @param {string} state\n * @param {string} zip_code\n */\n\n/**\n * @typedef SelectionObject\n * @param {string} label - The address formatted as a single line.\n * @param {AddressObject} value - The address in its individual components.\n */\n\n/**\n * The equivalent to react-select's onChange\n * @callback onSelection\n * @param {SelectionObject} option - The selected value from Lob's autocomplete\n */\n\n/**\n * @callback onInputChange\n * @param {string} newValue - The value of the input component\n * @param {Object} actionMeta - Describes the event that occured to the input. See\n *  https://react-select.com/props for more details\n */\n\n// /**\n//  * @callback onSuggestion\n//  * @param {Array.<SelectionObject>} suggestions - Address that start the same as the user's input\n//  */\n\n/**\n * @callback onError\n * @param {string} errorMessage\n */\n\n// We override react-select's default input component in order to let users edit their input value\n// and any selected values\nconst Input = (props) => <components.Input {...props} isHidden={false} />\n\n/**\n * @param {Object?} addressComponentValues - Specifies the search for autocomplete suggestions by\n *  including a city, state, and/or zip_code.\n * @param {string} apiKey - Public API key to your Lob account.\n * @param {boolean?} delaySearch -\n *  Delay calls to the API instead of calling on every keystroke.\n *  Default: true\n * @param {number?} delayValue - The time in milliseconds to wait between each API call.\n *  Default: 800\n * @param {string?} inputValue - Allows you to control the value of the input element\n * @param {onSelection?} onSelection -\n *  Callback function when the select component changes.\n * @param {onInputChange?} onInputChange -\n *  Callback function when the input value changes.\n * @param {onError?} onError - Callback function when we receive an API error.\n * @param {boolean} primaryLineOnly - When true, applying a suggestion updates the value of our\n * @param {boolean} disableLobLogo - When true, disables the Lob logo.\n *  select component with only the primary line of the address instead of the complete address.\n */\nconst Autocomplete = ({\n  addressComponentValues = {},\n  apiKey,\n  delaySearch = false,\n  delayValue = 800,\n  disableLobLogo = true,\n  onSelection = () => {},\n  onError = () => {},\n  onInputChange = () => {},\n  inputValue: defaultInputValue = '',\n  primaryLineOnly = false,\n  ...reactSelectProps\n}) => {\n  const [inputValue, setInputValue] = useState(defaultInputValue)\n  const [selectValue, setSelectValue] = useState('AD')\n  const [autocompleteResults, setAutocompleteResults] = useState([])\n\n  const fetchData = (inputValue, addressComponentValues) =>\n    postAutocompleteAddress(apiKey, inputValue, addressComponentValues)\n      .then((result) => result.json())\n      .then(({ suggestions, error }) => {\n        if (error) {\n          onError(error.message)\n          return\n        }\n\n        const newSuggestions = suggestions.map((x) => ({\n          value: x,\n          label: getOptionElement(x, inputValue)\n        }))\n\n        setAutocompleteResults([\n          {\n            value: LOB_LABEL,\n            label: getLobLabel()\n          },\n          ...newSuggestions\n        ])\n      })\n      .catch((err) => {\n        console.error(err.message)\n        onError(err.message)\n      })\n\n  const throttledFetchData = useRef(throttle(fetchData, delayValue)).current\n\n  useEffect(() => {\n    if (inputValue) {\n      if (delaySearch) {\n        // We pass inputValue manually because otherwise throttle would create a snapshot of\n        // fetchData with the previous state of inputValue instead of the new updated one.\n        throttledFetchData(inputValue, addressComponentValues)\n      } else {\n        fetchData(inputValue, addressComponentValues)\n      }\n    }\n    // eslint-disable-next-line\n  }, [inputValue, delaySearch])\n\n  /** Event handlers */\n  const updateInputValueFromOption = (option) => {\n    if (!option) {\n      setInputValue('')\n      return\n    }\n\n    /* eslint-disable camelcase */\n    const { primary_line, secondary_line, city, state, zip_code } = option.value\n\n    if (primaryLineOnly) {\n      setInputValue(primary_line)\n    } else {\n      const secondary = secondary_line ? ' ' + secondary_line : ''\n      setInputValue(\n        `${primary_line}${secondary}, ${city}, ${state}, ${zip_code}`\n      )\n    }\n    /* eslint-enable camelcase */\n  }\n\n  // Fire when the user types into the input\n  const handleInputChange = (newInputValue, { action }) => {\n    //https://github.com/lob/react-address-autocomplete/issues/20\n    //Realistically we don't need this at all but I'll leave it in for the future\n    if (action === 'input-blur') {\n      return\n    }\n    // onInputChange => update inputValue\n    else if (action === 'input-change') {\n      setInputValue(newInputValue)\n      onInputChange(newInputValue, { action })\n    }\n  }\n\n  // Fires when the select component has changed (as opposed to the input inside the select)\n  const handleChange = (option) => {\n    if (option.value === LOB_LABEL) {\n      window.location.href = LOB_URL\n      return\n    }\n\n    // User has pasted an address directly into input, let's call the API\n    if (typeof option === 'string') {\n      setInputValue(option)\n      setSelectValue(option)\n      onSelection(option)\n      return\n    }\n\n    updateInputValueFromOption(option)\n    onSelection(option)\n  }\n\n  const handleSelect = (option) => {\n    if (option.value !== LOB_LABEL) {\n      updateInputValueFromOption(option)\n      onSelection(option)\n    }\n  }\n\n  const customFilter = (candidate, input) => {\n    return candidate\n  }\n\n  // Remove padding from first option which is our Lob label\n  const customStyles = {\n    option: (styles, { data }) => {\n      if (data.value === LOB_LABEL) {\n        return {\n          ...styles,\n          background: 'none',\n          cursor: 'pointer',\n          padding: '0'\n        }\n      }\n      return styles\n    },\n    ...reactSelectProps.styles\n  }\n\n  return (\n    <Select\n      components={{ Input }}\n      inputValue={inputValue}\n      options={autocompleteResults}\n      controlShouldRenderValue={false}\n      noOptionsMessage={!disableLobLogo ? poweredByLob : () => <div></div>}\n      placeholder='Start typing an address...'\n      value={selectValue}\n      {...reactSelectProps}\n      // We don't let user completely override onChange and onInputChange and risk them breaking\n      // the behavior of our input component.\n      filterOption={customFilter}\n      onChange={handleChange}\n      onInputChange={handleInputChange}\n      onSelect={handleSelect}\n      styles={customStyles}\n    />\n  )\n}\nexport default Autocomplete\n","let baseStyles = {\n  lob_container: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  /* Mimics UI of react-select for consistency */\n  lob_input: {\n    backgroundColor: 'hsl(0, 0%, 100%)',\n    border: 'solid 1px hsl(0, 0%, 80%)',\n    borderRadius: '4px',\n    boxSizing: 'border-box',\n    minHeight: '38px',\n    outline: 0,\n    padding: '0px 8px',\n    width: '100%'\n  },\n  lob_label: {\n    alignSelf: 'center',\n    minWidth: '5em',\n    marginRight: '1em',\n    textAlign: 'end'\n  },\n  lob_row: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: '1em'\n  }\n}\n// eslint-disable-next-line\nexport default (userStyles, isInternational) => {\n  const mergedStyles = {}\n\n  if (isInternational) {\n    baseStyles = {\n      ...baseStyles,\n      lob_label: {\n        ...baseStyles.lob_label,\n        minWidth: '8em'\n      }\n    }\n  }\n\n  Object.keys(baseStyles).forEach((key) => {\n    mergedStyles[key] =\n      key in userStyles ? userStyles[key](baseStyles[key]) : baseStyles[key]\n  })\n\n  return mergedStyles\n}\n","/* eslint-disable camelcase */\n\n// External Dependencies\nimport React, { useState } from 'react'\n\n// Internal Dependencies\nimport { verify } from '../verify'\nimport Autocomplete from '../Autocomplete'\nimport useMergedStyles from './useMergedStyles'\n\nconst defaultForm = {\n  primary_line: '',\n  secondary_line: '',\n  city: '',\n  state: '',\n  zip_code: ''\n}\n\nconst customStyles = {\n  container: (provided) => ({ ...provided, width: '100%' })\n}\n\n/**\n * Similar to Autocomplete except each address component is given its own input. Autocomplete\n * occurs on the primary line but the results are inserted into each component.\n * @param {String} apiKey - Public API key to your Lob account.\n * @param {Array?} children - These elements get rendered between the address form inputs and\n *  submit button\n * @param {Boolean} hideSubmitButton - Hides the submit button and its behavior\n * @param {Function} onInputChange - Callback when any input value changes. Includes both the event\n *  object and address form. Use event.target.id to determine which component is being updated.\n * @param {Function} onSelection - Callback when the select component changes.\n * @param {Function} onSubmit - Callback after the submit button is clicked and the form inputs\n *  are updated. Passes the verification result from the API.\n * @param {Object} styles - Override the default styles by providing an object similar to the\n *  styling framework used by react-select. Each key corresponds to a component and maps to a\n *  function that returns the new styles.lob_ Here is an example:\n *    const customStyles = {\n *      container: (baseStyles) => ({\n *        ...baseStyles,\n *        // custom styles go here\n *      })\n *    }\n *  Here are the following style keys used. Note that they are all prefixed with 'lob' to avoid\n *  colliding with the keys used by react-select.\n *  - lob_container\n *  - lob_input\n *  - lob_label\n *  - lob_row\n *  - lob_submit\n *\n *  For more details visit https://react-select.com/styles\n * @param {String} submitButtonLabel\n */\nconst AddressForm = ({\n  apiKey,\n  children,\n  hideSubmitButton = false,\n  onFieldChange = () => {},\n  onSelection = () => {},\n  onSubmit = () => {},\n  styles = {},\n  submitButtonLabel = 'Submit',\n  ...additionalProps\n}) => {\n  const [form, setForm] = useState(defaultForm)\n  const { primary_line, secondary_line, city, state, zip_code } = form\n\n  const handleChange = (e) => {\n    const newForm = { ...form, [e.target.id]: e.target.value }\n    setForm(newForm)\n    onFieldChange({\n      address: newForm,\n      event: e\n    })\n  }\n\n  const handleChangePrimaryLine = (newInputValue, { action }) => {\n    if (action === 'input-change') {\n      const newForm = { ...form, primary_line: newInputValue }\n      setForm(newForm)\n      onFieldChange({\n        address: newForm,\n        event: {\n          target: {\n            id: 'primary_line',\n            value: newInputValue\n          }\n        }\n      })\n    }\n  }\n\n  const handleSelect = (option) => {\n    // Overwrite the contents of our form based on the user's selection. If the selection does not\n    // have a secondary_line we clear it in the form.\n    setForm({\n      ...option.value,\n      secondary_line: option.value.secondary_line || form.secondary_line || ''\n    })\n\n    onSelection({\n      ...option,\n      value: {\n        ...option.value,\n        secondary_line: option.value.secondary_line || form.secondary_line || ''\n      }\n    })\n  }\n\n  const handleSubmit = () =>\n    verify(apiKey, form).then((verificationResult) => {\n      const {\n        primary_line,\n        secondary_line,\n        components: { city, state, zip_code, zip_code_plus_4 }\n      } = verificationResult\n      setForm({\n        primary_line,\n        secondary_line,\n        city,\n        state,\n        zip_code: `${zip_code}-${zip_code_plus_4}`\n      })\n      onSubmit(verificationResult)\n    })\n\n  const mergedStyles = useMergedStyles(styles, false /* isInternational */)\n\n  return (\n    <div style={mergedStyles.lob_container}>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='primary_line'>\n          Address\n        </label>\n        <Autocomplete\n          apiKey={apiKey}\n          inputId='primary_line'\n          inputValue={primary_line}\n          {...additionalProps}\n          onInputChange={handleChangePrimaryLine}\n          // Below are properties that we don't let the user overwrite\n          _addressComponentValues={{ city, state, zip_code }}\n          onSelection={handleSelect}\n          primaryLineOnly\n          styles={customStyles}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='secondary_line'>\n          Apt, Suite\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='secondary_line'\n          onChange={handleChange}\n          value={secondary_line}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='city'>\n          City\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='city'\n          onChange={handleChange}\n          value={city}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='state'>\n          State\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='state'\n          onChange={handleChange}\n          value={state}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='zip_code'>\n          Zip\n        </label>\n        <input\n          style={{ ...mergedStyles.lob_input, marginBottom: 'auto' }}\n          id='zip_code'\n          onChange={handleChange}\n          value={zip_code}\n        />\n      </div>\n      {children}\n      {!hideSubmitButton && (\n        <button onClick={handleSubmit} style={mergedStyles.lob_submit}>\n          {submitButtonLabel}\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default AddressForm\n","// External Dependencies\nimport React from 'react'\n\n/**\n * ISO 3166 Country Codes. Lob international verification does not accept US or US territories\n * (US, AS, PR, FM, GU, MH, MP, PS, PW, or VI). For these addresses please use US verification.\n */\nexport const validLobCountryCodes = [\n  'AD',\n  'AE',\n  'AF',\n  'AG',\n  'AI',\n  'AL',\n  'AN',\n  'AO',\n  'AQ',\n  'AR',\n  'AT',\n  'AU',\n  'AW',\n  'AZ',\n  'BA',\n  'BB',\n  'BD',\n  'BE',\n  'BF',\n  'BG',\n  'BH',\n  'BI',\n  'BJ',\n  'BM',\n  'BN',\n  'BO',\n  'BQ',\n  'BR',\n  'BS',\n  'BT',\n  'BW',\n  'BY',\n  'BZ',\n  'CA',\n  'CD',\n  'CG',\n  'CH',\n  'CI',\n  'CK',\n  'CL',\n  'CM',\n  'CN',\n  'CO',\n  'CR',\n  'CS',\n  'CU',\n  'CV',\n  'CW',\n  'CY',\n  'CZ',\n  'DE',\n  'DJ',\n  'DK',\n  'DM',\n  'DO',\n  'DZ',\n  'EC',\n  'EE',\n  'EG',\n  'EH',\n  'ER',\n  'ES',\n  'ET',\n  'FI',\n  'FJ',\n  'FK',\n  'FO',\n  'FR',\n  'GA',\n  'GB',\n  'GD',\n  'GE',\n  'GH',\n  'GI',\n  'GL',\n  'GM',\n  'GN',\n  'GQ',\n  'GR',\n  'GS',\n  'GT',\n  'GW',\n  'GY',\n  'HK',\n  'HN',\n  'HR',\n  'HT',\n  'HU',\n  'ID',\n  'IE',\n  'IL',\n  'IN',\n  'IO',\n  'IQ',\n  'IR',\n  'IS',\n  'IT',\n  'JM',\n  'JO',\n  'JP',\n  'KE',\n  'KG',\n  'KH',\n  'KI',\n  'KM',\n  'KN',\n  'KP',\n  'KR',\n  'KW',\n  'KY',\n  'KZ',\n  'LA',\n  'LB',\n  'LC',\n  'LI',\n  'LK',\n  'LR',\n  'LS',\n  'LT',\n  'LU',\n  'LV',\n  'LY',\n  'MA',\n  'MC',\n  'MD',\n  'ME',\n  'MG',\n  'MK',\n  'ML',\n  'MM',\n  'MN',\n  'MO',\n  'MR',\n  'MS',\n  'MT',\n  'MU',\n  'MV',\n  'MW',\n  'MX',\n  'MY',\n  'MZ',\n  'NA',\n  'NE',\n  'NF',\n  'NG',\n  'NI',\n  'NL',\n  'NO',\n  'NP',\n  'NR',\n  'NU',\n  'NZ',\n  'OM',\n  'PA',\n  'PE',\n  'PG',\n  'PH',\n  'PK',\n  'PL',\n  'PN',\n  'PT',\n  'PY',\n  'QA',\n  'RO',\n  'RS',\n  'RU',\n  'RW',\n  'SA',\n  'SB',\n  'SC',\n  'SD',\n  'SE',\n  'SG',\n  'SH',\n  'SI',\n  'SK',\n  'SL',\n  'SM',\n  'SN',\n  'SO',\n  'SR',\n  'SS',\n  'ST',\n  'SV',\n  'SX',\n  'SY',\n  'SZ',\n  'TC',\n  'TD',\n  'TG',\n  'TH',\n  'TJ',\n  'TK',\n  'TL',\n  'TM',\n  'TN',\n  'TO',\n  'TR',\n  'TT',\n  'TV',\n  'TW',\n  'TZ',\n  'UA',\n  'UG',\n  'UY',\n  'UZ',\n  'VA',\n  'VC',\n  'VE',\n  'VG',\n  'VN',\n  'VU',\n  'WS',\n  'YE',\n  'ZA',\n  'ZM',\n  'ZW'\n]\n\n/**\n * Select component that hosts all of Lob's valid country codes for international verification.\n * This component does have any unique props.\n */\nconst CountrySelect = ({ ...props }) => (\n  <select {...props}>\n    {validLobCountryCodes.map((code) => (\n      <option key={code} value={code}>\n        {code}\n      </option>\n    ))}\n  </select>\n)\n\nexport default CountrySelect\n","/* eslint-disable camelcase */\n\n// External Dependencies\nimport React, { useState } from 'react'\n\n// Internal Dependencies\nimport { verifyInternational } from '../verify'\nimport CountrySelect from '../CountrySelect'\nimport useMergedStyles from './useMergedStyles'\n\nconst defaultForm = {\n  primary_line: '',\n  secondary_line: '',\n  city: '',\n  state: '',\n  postal_code: ''\n}\n\n/**\n * Renders a group of inputs for each address component including a select input for country code.\n * Does not perform any address autocompletion.\n * @param {String?} apiKey - Public API key to your Lob account.\n * @param {Array?} children - These elements get rendered between the address form inputs and\n *  submit button\n * @param {Boolean} hideSubmitButton - Hides the submit button and its behavior\n * @param {Function?} onFieldChange - Callback when any input value changes. Use e.target.id\n *  to determine which component is being updated.\n * @param {Function?} onSubmit - Callback after the submit button is clicked and the form inputs\n *  are updated. Passes the verification result from the API.\n * @param {Object} styles - Override the default styles by providing an object similar to the\n *  styling framework used by react-select. Each key corresponds to a component and maps to a\n *  function that returns the new styles.lob_ Here is an example:\n *    const customStyles = {\n *      container: (baseStyles) => ({\n *        ...baseStyles,\n *        // custom styles go here\n *      })\n *    }\n *  Here are the following style keys used. Note that they are all prefixed with 'lob' to avoid\n *  colliding with the keys used by react-select.\n *  - lob_container\n *  - lob_input\n *  - lob_label\n *  - lob_row\n *\n *  For more details visit https://react-select.com/styles\n * @param {String} submitButtonLabel\n */\nconst AddressFormInternational = ({\n  apiKey = null,\n  children,\n  hideSubmitButton = false,\n  onFieldChange = () => {},\n  onSubmit = () => {},\n  styles = {},\n  submitButtonLabel = 'Submit'\n}) => {\n  const [form, setForm] = useState(defaultForm)\n  const { primary_line, secondary_line, city, state, postal_code, country } =\n    form\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.id]: e.target.value })\n    onFieldChange(e)\n  }\n\n  const handleSubmit = () => {\n    // apiKey wasn't used is previous versions of AddressFormInternational so we made the prop\n    // optional to not introduce a breaking change.\n    if (!apiKey) {\n      console.error(\n        '[@lob/react-address-autocomplete] ' +\n          'AddressFormInternational requires props apiKey for verifications'\n      )\n      return\n    }\n\n    verifyInternational(apiKey, form, form.country).then(\n      (verificationResult) => {\n        const {\n          primary_line,\n          secondary_line,\n          components: { city, state, postal_code }\n        } = verificationResult\n        setForm({\n          primary_line,\n          secondary_line,\n          city,\n          state,\n          postal_code\n        })\n        onSubmit(verificationResult)\n      }\n    )\n  }\n\n  const mergedStyles = useMergedStyles(styles, true /* isInternational */)\n\n  return (\n    <div data-testid='intl_container' style={mergedStyles.lob_container}>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='primary_line'>\n          Address Line 1\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='primary_line'\n          onChange={handleChange}\n          value={primary_line}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='secondary_line'>\n          Address Line 2\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='secondary_line'\n          onChange={handleChange}\n          value={secondary_line}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='city'>\n          City / Town\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='city'\n          onChange={handleChange}\n          value={city}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='state'>\n          State / Province / Region\n        </label>\n        <input\n          style={mergedStyles.lob_input}\n          id='state'\n          onChange={handleChange}\n          value={state}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='postal_code'>\n          Zip / Postal Code\n        </label>\n        <input\n          style={{ ...mergedStyles.lob_input }}\n          id='postal_code'\n          onChange={handleChange}\n          value={postal_code}\n        />\n      </div>\n      <div style={mergedStyles.lob_row}>\n        <label style={mergedStyles.lob_label} htmlFor='country'>\n          Country\n        </label>\n        <CountrySelect\n          id='country'\n          onChange={handleChange}\n          style={{ ...mergedStyles.lob_input, marginBottom: 'auto' }}\n          value={country}\n        />\n      </div>\n      {children}\n      {!hideSubmitButton && (\n        <button onClick={handleSubmit} style={mergedStyles.lob_submit}>\n          {submitButtonLabel}\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default AddressFormInternational\n"]},"metadata":{},"sourceType":"module"}