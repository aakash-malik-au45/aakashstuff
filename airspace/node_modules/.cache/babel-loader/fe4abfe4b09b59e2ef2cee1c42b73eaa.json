{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const UerSlice = createSlice({\n  name: 'Uer',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = UerSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.Uer.value)`\n\nexport const selectCount = state => state.Uer.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default UerSlice.reducer;","map":{"version":3,"names":["createSlice","UerSlice","name","initialState","reducers","increment","state","value","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","incrementAsync","pending","status","fulfilled","actions","selectCount","Uer","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"sources":["C:/Users/asus/OneDrive/Desktop/capstone/carwebsite/src/features/counter/UserSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\n\n\nexport const UerSlice = createSlice({\n  name: 'Uer',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = UerSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.Uer.value)`\nexport const selectCount = (state) => state.Uer.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default UerSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAKA,OAAO,MAAMC,QAAQ,GAAGD,WAAW,CAAC;EAClCE,IAAI,EAAE,KAD4B;EAElCC,YAFkC;EAGlC;EACAC,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAD,IAAW;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACC,KAAN,IAAe,CAAf;IACD,CAPO;IAQRC,SAAS,EAAGF,KAAD,IAAW;MACpBA,KAAK,CAACC,KAAN,IAAe,CAAf;IACD,CAVO;IAWR;IACAE,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;MACpCJ,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;IACD;EAdO,CAJwB;EAoBlC;EACA;EACAC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWC,cAAc,CAACC,OAD1B,EACoCV,KAAD,IAAW;MAC1CA,KAAK,CAACW,MAAN,GAAe,SAAf;IACD,CAHH,EAIGH,OAJH,CAIWC,cAAc,CAACG,SAJ1B,EAIqC,CAACZ,KAAD,EAAQI,MAAR,KAAmB;MACpDJ,KAAK,CAACW,MAAN,GAAe,MAAf;MACAX,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;IACD,CAPH;EAQD;AA/BiC,CAAD,CAA5B;AAkCP,OAAO,MAAM;EAAEN,SAAF;EAAaG,SAAb;EAAwBC;AAAxB,IAA8CR,QAAQ,CAACkB,OAA7D,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAId,KAAD,IAAWA,KAAK,CAACe,GAAN,CAAUd,KAAzC,C,CAEP;AACA;;AACA,OAAO,MAAMe,cAAc,GAAIC,MAAD,IAAY,CAACC,QAAD,EAAWC,QAAX,KAAwB;EAChE,MAAMC,YAAY,GAAGN,WAAW,CAACK,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;IAC1BF,QAAQ,CAACf,iBAAiB,CAACc,MAAD,CAAlB,CAAR;EACD;AACF,CALM;AAOP,eAAetB,QAAQ,CAAC0B,OAAxB"},"metadata":{},"sourceType":"module"}