function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var base64 = _interopDefault(require('base-64'));
var Select = require('react-select');
var Select__default = _interopDefault(Select);
var throttle = _interopDefault(require('lodash.throttle'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var postAutocompleteAddress = function postAutocompleteAddress(apiKey, addressPrefix, additionalAddressData) {
  var url = new URL('https://api.lob.com/v1/us_autocompletions');
  url.searchParams.append('av_integration_origin', window.location.href);
  url.searchParams.append('integration', 'react-address-autocomplete');
  url.searchParams.append('valid_addresses', 'true');
  url.searchParams.append('case', 'proper');
  var init = {
    method: 'POST',
    headers: {
      Authorization: "Basic " + base64.encode(apiKey + ':'),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(_extends({
      address_prefix: addressPrefix
    }, additionalAddressData))
  };
  return fetch(url, init);
};
var postVerifyAddress = function postVerifyAddress(apiKey, address) {
  var payload = typeof address === 'string' ? {
    address: address
  } : address;
  var url = new URL('https://api.lob.com/v1/us_verifications');
  url.searchParams.append('av_integration_origin', window.location.href);
  url.searchParams.append('integration', 'react-address-autocomplete');
  var init = {
    method: 'POST',
    headers: {
      Authorization: "Basic " + base64.encode(apiKey + ':'),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  };
  return fetch(url, init);
};
var postVerifyInternationalAddress = function postVerifyInternationalAddress(apiKey, address, countryCode) {
  var payload = typeof address === 'string' ? {
    address: address
  } : address;
  var url = new URL('https://api.lob.com/v1/intl_verifications');
  url.searchParams.append('av_integration_origin', window.location.href);
  url.searchParams.append('integration', 'react-address-autocomplete');
  var init = {
    method: 'POST',
    headers: {
      Authorization: "Basic " + base64.encode(apiKey + ':'),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(_extends({}, payload, {
      country: countryCode
    }))
  };
  return fetch(url, init);
};

var processApiResponse = function processApiResponse(apiResponse) {
  return apiResponse.json().then(function (data) {
    return 'error' in data ? Promise.reject(new Error(data.error.message)) : data;
  });
};

var validateArguments = function validateArguments(apiKey, address, countryCode, isInternational) {
  if (!Object.keys(address || {}).length) {
    return new Error('Empty address was passed to verify function');
  }

  if (!apiKey.length) {
    return new Error('Missing API key');
  }

  if (isInternational) {
    if (typeof countryCode !== 'string') {
      return new Error('Expected countryCode to be of type string');
    }

    if (/[A-Z]{2}/.test(countryCode) === false) {
      return new Error('countryCode must be a 2 letter country short-name code (ISO 3166)');
    }
  }

  return null;
};

var verify = function verify(apiKey, address) {
  var error = validateArguments(apiKey, address, null, false);

  if (error) {
    return Promise.reject(error);
  }

  var payloadAddress = address;

  if (typeof address === 'object') {
    var componentsWithValue = Object.keys(address).filter(function (addressComponent) {
      return address[addressComponent] !== '';
    });

    if (componentsWithValue.length === 1 && componentsWithValue.includes('primary_line')) {
      payloadAddress = address.primary_line;
    }
  }

  return postVerifyAddress(apiKey, payloadAddress).then(processApiResponse);
};
var verifyInternational = function verifyInternational(apiKey, address, countryCode) {
  var error = validateArguments(apiKey, address, countryCode, true);

  if (error) {
    return Promise.reject(error);
  }

  return postVerifyInternationalAddress(apiKey, address, countryCode).then(processApiResponse);
};

var _excluded = ["addressComponentValues", "apiKey", "delaySearch", "delayValue", "disableLobLogo", "onSelection", "onError", "onInputChange", "inputValue", "primaryLineOnly"];
var LOB_LABEL = 'lob-label';
var LOB_URL = 'https://www.lob.com/address-verification?utm_source=autocomplete&utm_medium=react';
var lobGrayText = {
  color: '#888',
  textDecoration: 'inherit'
};
var lobLabel = {
  alignItems: 'center',
  borderBottom: '1px solid #DDDDDD',
  cursor: 'pointer',
  display: 'flex',
  fontSize: '17px',
  padding: '16px',
  pointerEvents: 'none'
};
var lobLabelLink = {
  fontWeight: 600,
  color: '#0699D6',
  textDecoration: 'inherit'
};
var lobLabelText = {
  flex: 1,
  fontWeight: 400,
  marginLeft: '12px'
};
var lobLogo = {
  height: '.9em',
  marginLeft: '1px',
  marginTop: '3px'
};
var logoLarge = {
  height: '21px'
};

var LobLogo = function LobLogo(_ref) {
  var style = _ref.style;
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 1259 602",
    style: style
  }, /*#__PURE__*/React__default.createElement("path", {
    fill: "#0099d7",
    d: "M1063,141c-47.06,0-89,18.33-121,50.78V0H780V338.74C765,222.53,666.88,138,540,138c-137,0-242,101-242,232a235,235,0,0,0,7.7,60H164V0H0V585H307l14.54-112.68C359.94,550,441.74,602,540,602c127.75,0,225.08-83.62,240-200.41V585H930V540.27c31.8,37,77.27,56.73,133,56.73,103,0,196-109,196-228C1259,239,1175,141,1063,141ZM540,450c-45,0-81-36-81-80s36-80,81-80c46,0,81,35,81,80S585,450,540,450Zm475-1c-46,0-83-36-83-80a82.8,82.8,0,0,1,82.6-83h.4c47,0,85,37,85,83C1100,413,1062,449,1015,449Z"
  }));
};

var poweredByLob = function poweredByLob() {
  return /*#__PURE__*/React__default.createElement("a", {
    href: LOB_URL,
    style: lobGrayText
  }, /*#__PURE__*/React__default.createElement("span", {
    style: {
      verticalAlign: 'top'
    }
  }, "Powered by "), /*#__PURE__*/React__default.createElement(LobLogo, {
    style: lobLogo
  }));
};

var getLobLabel = function getLobLabel() {
  return /*#__PURE__*/React__default.createElement("div", {
    style: lobLabel
  }, /*#__PURE__*/React__default.createElement(LobLogo, {
    style: logoLarge
  }), /*#__PURE__*/React__default.createElement("span", {
    style: _extends({}, lobGrayText, lobLabelText)
  }, "Deliverable addresses"), /*#__PURE__*/React__default.createElement("a", {
    style: lobLabelLink,
    href: LOB_URL
  }, "Learn more"));
};

var getOptionElement = function getOptionElement(suggestion, inputValue) {
  var primary_line = suggestion.primary_line,
      city = suggestion.city,
      state = suggestion.state,
      zip_code = suggestion.zip_code;
  var boldStopIndex = 0;
  inputValue.split('').forEach(function (inputChar) {
    if (inputChar.toLowerCase() === primary_line.charAt(boldStopIndex).toLowerCase()) {
      boldStopIndex += 1;
    }
  });
  var primaryLineElement = boldStopIndex === 0 ? /*#__PURE__*/React__default.createElement("span", null, primary_line, ", ") : boldStopIndex === primary_line.length ? /*#__PURE__*/React__default.createElement("span", null, /*#__PURE__*/React__default.createElement("strong", null, primary_line, ", ")) : /*#__PURE__*/React__default.createElement("span", null, /*#__PURE__*/React__default.createElement("strong", null, primary_line.substring(0, boldStopIndex)), primary_line.substring(boldStopIndex), ",", ' ');
  return /*#__PURE__*/React__default.createElement("span", null, primaryLineElement, /*#__PURE__*/React__default.createElement("span", {
    style: lobGrayText
  }, city, ",\xA0", state.toUpperCase(), ",\xA0", zip_code));
};

var Input = function Input(props) {
  return /*#__PURE__*/React__default.createElement(Select.components.Input, _extends({}, props, {
    isHidden: false
  }));
};

var Autocomplete = function Autocomplete(_ref2) {
  var _ref2$addressComponen = _ref2.addressComponentValues,
      addressComponentValues = _ref2$addressComponen === void 0 ? {} : _ref2$addressComponen,
      apiKey = _ref2.apiKey,
      _ref2$delaySearch = _ref2.delaySearch,
      delaySearch = _ref2$delaySearch === void 0 ? false : _ref2$delaySearch,
      _ref2$delayValue = _ref2.delayValue,
      delayValue = _ref2$delayValue === void 0 ? 800 : _ref2$delayValue,
      _ref2$disableLobLogo = _ref2.disableLobLogo,
      disableLobLogo = _ref2$disableLobLogo === void 0 ? true : _ref2$disableLobLogo,
      _ref2$onSelection = _ref2.onSelection,
      onSelection = _ref2$onSelection === void 0 ? function () {} : _ref2$onSelection,
      _ref2$onError = _ref2.onError,
      onError = _ref2$onError === void 0 ? function () {} : _ref2$onError,
      _ref2$onInputChange = _ref2.onInputChange,
      onInputChange = _ref2$onInputChange === void 0 ? function () {} : _ref2$onInputChange,
      _ref2$inputValue = _ref2.inputValue,
      defaultInputValue = _ref2$inputValue === void 0 ? '' : _ref2$inputValue,
      _ref2$primaryLineOnly = _ref2.primaryLineOnly,
      primaryLineOnly = _ref2$primaryLineOnly === void 0 ? false : _ref2$primaryLineOnly,
      reactSelectProps = _objectWithoutPropertiesLoose(_ref2, _excluded);

  var _useState = React.useState(defaultInputValue),
      inputValue = _useState[0],
      setInputValue = _useState[1];

  var _useState2 = React.useState('AD'),
      selectValue = _useState2[0],
      setSelectValue = _useState2[1];

  var _useState3 = React.useState([]),
      autocompleteResults = _useState3[0],
      setAutocompleteResults = _useState3[1];

  var fetchData = function fetchData(inputValue, addressComponentValues) {
    return postAutocompleteAddress(apiKey, inputValue, addressComponentValues).then(function (result) {
      return result.json();
    }).then(function (_ref3) {
      var suggestions = _ref3.suggestions,
          error = _ref3.error;

      if (error) {
        onError(error.message);
        return;
      }

      var newSuggestions = suggestions.map(function (x) {
        return {
          value: x,
          label: getOptionElement(x, inputValue)
        };
      });
      setAutocompleteResults([{
        value: LOB_LABEL,
        label: getLobLabel()
      }].concat(newSuggestions));
    })["catch"](function (err) {
      console.error(err.message);
      onError(err.message);
    });
  };

  var throttledFetchData = React.useRef(throttle(fetchData, delayValue)).current;
  React.useEffect(function () {
    if (inputValue) {
      if (delaySearch) {
        throttledFetchData(inputValue, addressComponentValues);
      } else {
        fetchData(inputValue, addressComponentValues);
      }
    }
  }, [inputValue, delaySearch]);

  var updateInputValueFromOption = function updateInputValueFromOption(option) {
    if (!option) {
      setInputValue('');
      return;
    }

    var _option$value = option.value,
        primary_line = _option$value.primary_line,
        secondary_line = _option$value.secondary_line,
        city = _option$value.city,
        state = _option$value.state,
        zip_code = _option$value.zip_code;

    if (primaryLineOnly) {
      setInputValue(primary_line);
    } else {
      var secondary = secondary_line ? ' ' + secondary_line : '';
      setInputValue("" + primary_line + secondary + ", " + city + ", " + state + ", " + zip_code);
    }
  };

  var handleInputChange = function handleInputChange(newInputValue, _ref4) {
    var action = _ref4.action;

    if (action === 'input-blur') {
      return;
    } else if (action === 'input-change') {
      setInputValue(newInputValue);
      onInputChange(newInputValue, {
        action: action
      });
    }
  };

  var handleChange = function handleChange(option) {
    if (option.value === LOB_LABEL) {
      window.location.href = LOB_URL;
      return;
    }

    if (typeof option === 'string') {
      setInputValue(option);
      setSelectValue(option);
      onSelection(option);
      return;
    }

    updateInputValueFromOption(option);
    onSelection(option);
  };

  var handleSelect = function handleSelect(option) {
    if (option.value !== LOB_LABEL) {
      updateInputValueFromOption(option);
      onSelection(option);
    }
  };

  var customFilter = function customFilter(candidate, input) {
    return candidate;
  };

  var customStyles = _extends({
    option: function option(styles, _ref5) {
      var data = _ref5.data;

      if (data.value === LOB_LABEL) {
        return _extends({}, styles, {
          background: 'none',
          cursor: 'pointer',
          padding: '0'
        });
      }

      return styles;
    }
  }, reactSelectProps.styles);

  return /*#__PURE__*/React__default.createElement(Select__default, _extends({
    components: {
      Input: Input
    },
    inputValue: inputValue,
    options: autocompleteResults,
    controlShouldRenderValue: false,
    noOptionsMessage: !disableLobLogo ? poweredByLob : function () {
      return /*#__PURE__*/React__default.createElement("div", null);
    },
    placeholder: "Start typing an address...",
    value: selectValue
  }, reactSelectProps, {
    filterOption: customFilter,
    onChange: handleChange,
    onInputChange: handleInputChange,
    onSelect: handleSelect,
    styles: customStyles
  }));
};

var baseStyles = {
  lob_container: {
    display: 'flex',
    flexDirection: 'column'
  },
  lob_input: {
    backgroundColor: 'hsl(0, 0%, 100%)',
    border: 'solid 1px hsl(0, 0%, 80%)',
    borderRadius: '4px',
    boxSizing: 'border-box',
    minHeight: '38px',
    outline: 0,
    padding: '0px 8px',
    width: '100%'
  },
  lob_label: {
    alignSelf: 'center',
    minWidth: '5em',
    marginRight: '1em',
    textAlign: 'end'
  },
  lob_row: {
    display: 'flex',
    flexDirection: 'row',
    marginBottom: '1em'
  }
};
var useMergedStyles = (function (userStyles, isInternational) {
  var mergedStyles = {};

  if (isInternational) {
    baseStyles = _extends({}, baseStyles, {
      lob_label: _extends({}, baseStyles.lob_label, {
        minWidth: '8em'
      })
    });
  }

  Object.keys(baseStyles).forEach(function (key) {
    mergedStyles[key] = key in userStyles ? userStyles[key](baseStyles[key]) : baseStyles[key];
  });
  return mergedStyles;
});

var _excluded$1 = ["apiKey", "children", "hideSubmitButton", "onFieldChange", "onSelection", "onSubmit", "styles", "submitButtonLabel"];
var defaultForm = {
  primary_line: '',
  secondary_line: '',
  city: '',
  state: '',
  zip_code: ''
};
var customStyles = {
  container: function container(provided) {
    return _extends({}, provided, {
      width: '100%'
    });
  }
};

var AddressForm = function AddressForm(_ref) {
  var apiKey = _ref.apiKey,
      children = _ref.children,
      _ref$hideSubmitButton = _ref.hideSubmitButton,
      hideSubmitButton = _ref$hideSubmitButton === void 0 ? false : _ref$hideSubmitButton,
      _ref$onFieldChange = _ref.onFieldChange,
      onFieldChange = _ref$onFieldChange === void 0 ? function () {} : _ref$onFieldChange,
      _ref$onSelection = _ref.onSelection,
      onSelection = _ref$onSelection === void 0 ? function () {} : _ref$onSelection,
      _ref$onSubmit = _ref.onSubmit,
      onSubmit = _ref$onSubmit === void 0 ? function () {} : _ref$onSubmit,
      _ref$styles = _ref.styles,
      styles = _ref$styles === void 0 ? {} : _ref$styles,
      _ref$submitButtonLabe = _ref.submitButtonLabel,
      submitButtonLabel = _ref$submitButtonLabe === void 0 ? 'Submit' : _ref$submitButtonLabe,
      additionalProps = _objectWithoutPropertiesLoose(_ref, _excluded$1);

  var _useState = React.useState(defaultForm),
      form = _useState[0],
      setForm = _useState[1];

  var primary_line = form.primary_line,
      secondary_line = form.secondary_line,
      city = form.city,
      state = form.state,
      zip_code = form.zip_code;

  var handleChange = function handleChange(e) {
    var _extends2;

    var newForm = _extends({}, form, (_extends2 = {}, _extends2[e.target.id] = e.target.value, _extends2));

    setForm(newForm);
    onFieldChange({
      address: newForm,
      event: e
    });
  };

  var handleChangePrimaryLine = function handleChangePrimaryLine(newInputValue, _ref2) {
    var action = _ref2.action;

    if (action === 'input-change') {
      var newForm = _extends({}, form, {
        primary_line: newInputValue
      });

      setForm(newForm);
      onFieldChange({
        address: newForm,
        event: {
          target: {
            id: 'primary_line',
            value: newInputValue
          }
        }
      });
    }
  };

  var handleSelect = function handleSelect(option) {
    setForm(_extends({}, option.value, {
      secondary_line: option.value.secondary_line || form.secondary_line || ''
    }));
    onSelection(_extends({}, option, {
      value: _extends({}, option.value, {
        secondary_line: option.value.secondary_line || form.secondary_line || ''
      })
    }));
  };

  var handleSubmit = function handleSubmit() {
    return verify(apiKey, form).then(function (verificationResult) {
      var primary_line = verificationResult.primary_line,
          secondary_line = verificationResult.secondary_line,
          _verificationResult$c = verificationResult.components,
          city = _verificationResult$c.city,
          state = _verificationResult$c.state,
          zip_code = _verificationResult$c.zip_code,
          zip_code_plus_4 = _verificationResult$c.zip_code_plus_4;
      setForm({
        primary_line: primary_line,
        secondary_line: secondary_line,
        city: city,
        state: state,
        zip_code: zip_code + "-" + zip_code_plus_4
      });
      onSubmit(verificationResult);
    });
  };

  var mergedStyles = useMergedStyles(styles, false);
  return /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_container
  }, /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "primary_line"
  }, "Address"), /*#__PURE__*/React__default.createElement(Autocomplete, _extends({
    apiKey: apiKey,
    inputId: "primary_line",
    inputValue: primary_line
  }, additionalProps, {
    onInputChange: handleChangePrimaryLine,
    _addressComponentValues: {
      city: city,
      state: state,
      zip_code: zip_code
    },
    onSelection: handleSelect,
    primaryLineOnly: true,
    styles: customStyles
  }))), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "secondary_line"
  }, "Apt, Suite"), /*#__PURE__*/React__default.createElement("input", {
    style: mergedStyles.lob_input,
    id: "secondary_line",
    onChange: handleChange,
    value: secondary_line
  })), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "city"
  }, "City"), /*#__PURE__*/React__default.createElement("input", {
    style: mergedStyles.lob_input,
    id: "city",
    onChange: handleChange,
    value: city
  })), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "state"
  }, "State"), /*#__PURE__*/React__default.createElement("input", {
    style: mergedStyles.lob_input,
    id: "state",
    onChange: handleChange,
    value: state
  })), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "zip_code"
  }, "Zip"), /*#__PURE__*/React__default.createElement("input", {
    style: _extends({}, mergedStyles.lob_input, {
      marginBottom: 'auto'
    }),
    id: "zip_code",
    onChange: handleChange,
    value: zip_code
  })), children, !hideSubmitButton && /*#__PURE__*/React__default.createElement("button", {
    onClick: handleSubmit,
    style: mergedStyles.lob_submit
  }, submitButtonLabel));
};

var validLobCountryCodes

var CountrySelect = function CountrySelect(_ref) {
  var props = _extends({}, _ref);

  return /*#__PURE__*/React__default.createElement("select", props, validLobCountryCodes.map(function (code) {
    return /*#__PURE__*/React__default.createElement("option", {
      key: code,
      value: code
    }, code);
  }));
};

var defaultForm$1 = {
  primary_line: '',
  secondary_line: '',
  city: '',
  state: '',
  postal_code: ''
};

var AddressFormInternational = function AddressFormInternational(_ref) {
  var _ref$apiKey = _ref.apiKey,
      apiKey = _ref$apiKey === void 0 ? null : _ref$apiKey,
      children = _ref.children,
      _ref$hideSubmitButton = _ref.hideSubmitButton,
      hideSubmitButton = _ref$hideSubmitButton === void 0 ? false : _ref$hideSubmitButton,
      _ref$onFieldChange = _ref.onFieldChange,
      onFieldChange = _ref$onFieldChange === void 0 ? function () {} : _ref$onFieldChange,
      _ref$onSubmit = _ref.onSubmit,
      onSubmit = _ref$onSubmit === void 0 ? function () {} : _ref$onSubmit,
      _ref$styles = _ref.styles,
      styles = _ref$styles === void 0 ? {} : _ref$styles,
      _ref$submitButtonLabe = _ref.submitButtonLabel,
      submitButtonLabel = _ref$submitButtonLabe === void 0 ? 'Submit' : _ref$submitButtonLabe;

  var _useState = React.useState(defaultForm$1),
      form = _useState[0],
      setForm = _useState[1];

  var primary_line = form.primary_line,
      secondary_line = form.secondary_line,
      city = form.city,
      state = form.state,
      postal_code = form.postal_code,
      country = form.country;

  var handleChange = function handleChange(e) {
    var _extends2;

    setForm(_extends({}, form, (_extends2 = {}, _extends2[e.target.id] = e.target.value, _extends2)));
    onFieldChange(e);
  };

  var handleSubmit = function handleSubmit() {
    if (!apiKey) {
      console.error('[@lob/react-address-autocomplete] ' + 'AddressFormInternational requires props apiKey for verifications');
      return;
    }

    verifyInternational(apiKey, form, form.country).then(function (verificationResult) {
      var primary_line = verificationResult.primary_line,
          secondary_line = verificationResult.secondary_line,
          _verificationResult$c = verificationResult.components,
          city = _verificationResult$c.city,
          state = _verificationResult$c.state,
          postal_code = _verificationResult$c.postal_code;
      setForm({
        primary_line: primary_line,
        secondary_line: secondary_line,
        city: city,
        state: state,
        postal_code: postal_code
      });
      onSubmit(verificationResult);
    });
  };

  var mergedStyles = useMergedStyles(styles, true);
  return /*#__PURE__*/React__default.createElement("div", {
    "data-testid": "intl_container",
    style: mergedStyles.lob_container
  }, /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "primary_line"
  }, "Address Line 1"), /*#__PURE__*/React__default.createElement("input", {
    style: mergedStyles.lob_input,
    id: "primary_line",
    onChange: handleChange,
    value: primary_line
  })), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "secondary_line"
  }, "Address Line 2"), /*#__PURE__*/React__default.createElement("input", {
    style: mergedStyles.lob_input,
    id: "secondary_line",
    onChange: handleChange,
    value: secondary_line
  })), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "city"
  }, "City / Town"), /*#__PURE__*/React__default.createElement("input", {
    style: mergedStyles.lob_input,
    id: "city",
    onChange: handleChange,
    value: city
  })), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "state"
  }, "State / Province / Region"), /*#__PURE__*/React__default.createElement("input", {
    style: mergedStyles.lob_input,
    id: "state",
    onChange: handleChange,
    value: state
  })), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "postal_code"
  }, "Zip / Postal Code"), /*#__PURE__*/React__default.createElement("input", {
    style: _extends({}, mergedStyles.lob_input),
    id: "postal_code",
    onChange: handleChange,
    value: postal_code
  })), /*#__PURE__*/React__default.createElement("div", {
    style: mergedStyles.lob_row
  }, /*#__PURE__*/React__default.createElement("label", {
    style: mergedStyles.lob_label,
    htmlFor: "country"
  }, "Country"), /*#__PURE__*/React__default.createElement(CountrySelect, {
    id: "country",
    onChange: handleChange,
    style: _extends({}, mergedStyles.lob_input, {
      marginBottom: 'auto'
    }),
    value: country
  })), children, !hideSubmitButton && /*#__PURE__*/React__default.createElement("button", {
    onClick: handleSubmit,
    style: mergedStyles.lob_submit
  }, submitButtonLabel));
};

exports.AddressForm = AddressForm;
exports.AddressFormInternational = AddressFormInternational;
exports.Autocomplete = Autocomplete;
exports.CountrySelect = CountrySelect;
exports.verify = verify;
exports.verifyInternational = verifyInternational;
//# sourceMappingURL=index.js.map
